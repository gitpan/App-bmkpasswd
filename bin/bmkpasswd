#!perl
use strictures 1;

use POSIX ();

use App::bmkpasswd qw/ mkpasswd passwdcmp /;
use Time::HiRes    qw/ gettimeofday tv_interval /;
use Try::Tiny;

my $type    = 'bcrypt';
my $bcost   = '08';
my $bench   = 0;
my $strong  = 0;
my $check;

use Pod::Usage;
use Getopt::Long;
GetOptions(

  'benchmark!'       => \$bench,
  'strong!'          => \$strong,
  'check=s'          => \$check,
  'm|method|type=s'  => \$type,
  'workcost=s'       => \$bcost,
  
  'version' => sub {
     require Crypt::Eksblowfish::Bcrypt;
     print(
           "App::bmkpasswd $App::bmkpasswd::VERSION\n\n",
           "  Crypt::Eksblowfish::Bcrypt-", 
            $Crypt::Eksblowfish::Bcrypt::VERSION, "\n\n",
     );
     
     print "  SHA256 available\n" if App::bmkpasswd::have_sha(256);
     print "  SHA512 available\n" if App::bmkpasswd::have_sha(512);

     print "  Using Crypt::Passwd::XS\n" 
       if App::bmkpasswd::have_passwd_xs;
     
     exit 0
   },

  'help'   => sub { pod2usage(0) },
  'man'    => sub { pod2usage(-verbose => 2, -noperldoc => 1) },
  'usage'  => sub { pod2usage(2) },
);

my $pwd;
if (@ARGV) {
  $pwd = $ARGV[0];
} else {
  $|++; 
  print {*STDERR} "Password: ";

  my $term = POSIX::Termios->new;
  $term->getattr(0);
  $term->setlflag( $term->getlflag & ~POSIX::ECHO );
  $term->setattr(0);

  $pwd = <STDIN>;

  $term->setlflag( $term->getlflag | POSIX::ECHO );
  $term->setattr(0);

  chomp($pwd);
  print {*STDERR} "\n";
}

my $timer = [gettimeofday()] if $bench;

if ($check) {
  if ( passwdcmp($pwd, $check) ) {
    print "Match\n", "$check\n";
  } else {
    exit 1
  }
} else {
  print mkpasswd($pwd, $type, $bcost, $strong)."\n";
}
if ($bench) {
  my $interval = tv_interval($timer);
  print " bench: $type, time: $interval\n";
}
exit 0

__END__
=pod

=head1 NAME

 bmkpasswd - bcrypt-enabled mkpasswd

=head1 SYNOPSIS

 bmkpasswd [OPTIONS]... [PASSWD]

=head1 OPTIONS

 -m, --method=TYPE  [default: bcrypt]
     Types:  bcrypt  (recommended; guaranteed available)
             sha512  (requires recent libc or Crypt::Passwd::XS)
             sha256  (requires recent libc or Crypt::Passwd::XS)

 -c, --check=HASH   Compare password against given HASH

 -s, --strong       Use strongly-random salt generation

 -w, --workcost=NUM Bcrypt work-cost factor; default 08.
                    Higher is slower. Should be a two-digit power of 2.

 -b, --benchmark    Show timers; useful for comparing hash generation

If PASSWD is missing, it is prompted for interactively.

=head1 DESCRIPTION

Simple bcrypt-enabled mkpasswd.

While SHA512 isn't a bad choice if you have it, bcrypt has the 
advantage of including a configurable work cost factor.

A higher work cost factor exponentially increases hashing time, meaning 
a brute-force attack against stolen hashes can take a B<very> long time.

Salts are randomly generated using L<Bytes::Random::Secure>.
Using the C<--strong> option requires a reliable source of entropy; try
B<haveged> (L<http://www.issihosts.com/haveged/downloads.html>), especially on
headless Linux systems.

See L<App::bmkpasswd> for more details on bcrypt and the inner workings of
this software.

See L<Crypt::Bcrypt::Easy> if you'd like a simple interface to creating and
comparing bcrypted passwords from your own modules.

=head1 AUTHOR

Jon Portnoy <avenj@cobaltirc.org>

=cut
